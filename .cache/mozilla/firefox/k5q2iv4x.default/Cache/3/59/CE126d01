<div class="snippet_set" id="snippet_set" data-locale="en-US">
  <style type="text/css">
 #snippetContainer div.snippet {
     display: none;
 }

 #snippetContainer div.snippet img.icon {
     margin: -0.75em 1em 0 0;
     float: left;
 }

    .snippet {
       position: relative;
   }

   .snippet .icon {
       position: absolute;
       right: 400px;
       top: 5px;
       height: 50px;
   }

   .snippet p {
       display: table-cell;
       height: 40px;
       padding-left: 80px;
       vertical-align: middle;
       width: 400px;
   }
 
 </style>    <script type="text/javascript">
//<![CDATA[
/*!
  * $script.js Async loader & dependency manager
  * https://github.com/ded/script.js
  * (c) Dustin Diaz, Jacob Thornton 2011
  * License: MIT
  */
(function(a,b,c){typeof c["module"]!="undefined"&&c.module.exports?c.module.exports=b():typeof c["define"]!="undefined"&&c["define"]=="function"&&c.define.amd?define(a,b):c[a]=b()})("$script",function(){function p(a,b){for(var c=0,d=a.length;c<d;++c)if(!b(a[c]))return j;return 1}function q(a,b){p(a,function(a){return!b(a)})}function r(a,b,i){function o(a){return a.call?a():d[a]}function t(){if(!--n){d[m]=1,l&&l();for(var a in f)p(a.split("|"),o)&&!q(f[a],o)&&(f[a]=[])}}a=a[k]?a:[a];var j=b&&b.call,l=j?b:i,m=j?a.join(""):b,n=a.length;return setTimeout(function(){q(a,function(a){if(h[a])return m&&(e[m]=1),h[a]==2&&t();h[a]=1,m&&(e[m]=1),s(!c.test(a)&&g?g+a+".js":a,t)})},0),r}function s(c,d){var e=a.createElement("script"),f=j;e.onload=e.onerror=e[o]=function(){if(e[m]&&!/^c|loade/.test(e[m])||f)return;e.onload=e[o]=null,f=1,h[c]=2,d()},e.async=1,e.src=c,b.insertBefore(e,b.firstChild)}var a=document,b=a.getElementsByTagName("head")[0],c=/^https?:\/\//,d={},e={},f={},g,h={},i="string",j=!1,k="push",l="DOMContentLoaded",m="readyState",n="addEventListener",o="onreadystatechange";return!a[m]&&a[n]&&(a[n](l,function t(){a.removeEventListener(l,t,j),a[m]="complete"},j),a[m]="loading"),r.get=s,r.order=function(a,b,c){(function d(e){e=a.shift(),a.length?r(e,d):r(e,b,c)})()},r.path=function(a){g=a},r.ready=function(a,b,c){a=a[k]?a:[a];var e=[];return!q(a,function(a){d[a]||e[k](a)})&&p(a,function(a){return d[a]})?b():!function(a){f[a]=f[a]||[],f[a][k](b),c&&c(e)}(a.join("|")),r},r},this);

var SNIPPET_METRICS_SAMPLE_RATE = 0.1;
var SNIPPET_METRICS_URL = 'https://snippets-stats.mozilla.org/foo.html';

(function(showDefaultSnippets) {
    'use strict';

    var GEO_URL = 'https://geo.mozilla.org/country.js';
    var GEO_CACHE_DURATION = 1000 * 60 * 60 * 24 * 30; // 30 days

    // showDefaultSnippets polyfill, available in about:home v4
    if (typeof showDefaultSnippets !== 'function') {
        showDefaultSnippets = function() {
            localStorage.snippets = '';
            showSnippets();
        };
    }

    // gSnippetsMap polyfill, available in Firefox 22 and above.
    var gSnippetsMap = null;
    if (supportsLocalStorage()) {
        // localStorage is available, so we wrap it with gSnippetsMap.
        gSnippetsMap = {
            set: function(key, value) {
                localStorage[key] = value;
            },
            get: function(key) {
                return localStorage[key];
            }
        };
    } else {
        // localStorage isn't available, use gSnippetsMap (backed by IndexedDB).
        gSnippetsMap = window.gSnippetsMap;
    }

    var snippets = (document.getElementById('snippetContainer')
                    .getElementsByClassName('snippet'));
    var show_snippet = null;
    if (snippets.length > 0) {
        show_snippet = chooseSnippet(snippets);
    }

    if (show_snippet) {
        show_snippet.style.display = 'block';

        try {
            activateSnippetsButtonClick(show_snippet);
        } catch (err) {
            // Do nothing, most likely a newer version of Firefox w/o
            // activateSnippetsButtonClick
        }

        // Determine snippet ID.
        var metaParent = show_snippet.parentNode;
        while (metaParent && metaParent.classList &&
               !metaParent.classList.contains('snippet-metadata')) {
            metaParent = metaParent.parentNode;
        }

        var show_snippet_id = 'unknown';
        var show_snippet_campaign = '';
        if (metaParent) {
            show_snippet_id = metaParent.dataset.snippetId || 'unknown';
            show_snippet_campaign = metaParent.dataset.campaign || '';
        }
        document.getElementById('snippet_set').setAttribute('data-snippet-id', show_snippet_id);
        document.getElementById('snippet_set').setAttribute('data-campaign', show_snippet_campaign);
        sendImpression();

        // Trigger show_snippet event on snippet node.
        var evt = document.createEvent('Event');
        evt.initEvent('show_snippet', true, true);
        show_snippet.dispatchEvent(evt);

        // Add sample rate and snippet ID to currently displayed links.
        var parameters = ('sample_rate=' + SNIPPET_METRICS_SAMPLE_RATE + '&snippet_name=' +
                          show_snippet_id);
        modifyLinks(show_snippet.getElementsByTagName('a'), parameters);
        addSnippetBlockLinks(show_snippet.getElementsByClassName('block-snippet-button'));
    } else {
        showDefaultSnippets();
    }

    // Update FxAccount Status
    updateFxAccountStatus();

    // Update Selected Search Engine
    updateSelectedSearchEngine();

    // Fetch user country if we don't have it.
    if (!haveUserCountry()) {
        downloadUserCountry();
    }

            // Choose which snippet to display to the user based on various factors,
    // such as which country they are in.
    function chooseSnippet(snippets) {
        // Convert HTMLCollection to Array.
        snippets = [].slice.call(snippets);

        var userCountry = getUserCountry();
        if (userCountry) {
            document.getElementById('snippet_set').dataset.userCountry = userCountry;
            snippets = snippets.filter(
                function(snippet) {
                    var countries = snippet.parentNode.dataset.countries;
                    if (countries && countries.split(',').indexOf(userCountry) === -1) {
                        return false;
                    }
                    return true;
                }
            );
        }
        else {
            document.getElementById('snippet_set').dataset.userCountry = '';

            // If we don't have the user's country, remove all geolocated snippets.
            // Bug 1140476
            snippets = snippets.filter(
                function(snippet) {
                    return !snippet.parentNode.dataset.countries;
                }
            )
        }

        // FxAccount is already setup skip snippets that link to
        // about:accounts
        if (isFxAccountSetup()) {
            snippets = snippets.filter(
                function(snippet) {
                    return !hasAboutAccountsLink(snippet);
                }
            );
        }

        // Exclude snippets from search providers.
        var searchProvider = gSnippetsMap.get('selectedSearchEngine');
        if (searchProvider) {
            snippets = snippets.filter(
                function(snippet) {
                    var excludeFromSearchEngines = snippet.parentNode.getAttribute('data-exclude-from-search-engines');
                    if (excludeFromSearchEngines && excludeFromSearchEngines.split(',').indexOf(searchProvider) !== -1) {
                        return false;
                    }
                    return true;
                }
            );
        }

        // Exclude snippets in block list.
        var blockList = getBlockList();
        snippets = snippets.filter(
            function (snippet) {
                var snippet_id = parseInt(snippet.parentNode.getAttribute('data-snippet-id'), 10);
                if (blockList.indexOf(snippet_id) === -1) {
                    return true;
                }
                return false;
            }
        );

        // Choose a random snippet from the snippets list.
        if (snippets && snippets.length) {
            var sum = 0;
            for (var k = 0; k < snippets.length; k++) {
                sum += parseInt(snippets[k].parentNode.dataset.weight, 10) || 100;
                snippets[k].parentNode.dataset.weight = sum;
            }
            var random_number = Math.random() * sum;
            for (var k = 0; k < snippets.length; k++) {
                if (random_number < snippets[k].parentNode.dataset.weight) {
                    return snippets[k];
                }
            }
        } else {
            return null;
        }
    }
    
    // Check whether snippet links to about:accounts.
    function hasAboutAccountsLink(snippet) {
        var links = snippet.getElementsByTagName('a')
        for (var i = 0; i < links.length; i++) {
            if (links[i].href.indexOf('about:accounts') === 0) {
                return true;
            }
        }
        return false;
    }

    function isFxAccountSetup() {
        var fxaccount = gSnippetsMap.get('fxaccount');
        if (fxaccount !== undefined) {
            return fxaccount;
        }
        // If fxaccount === undefined pretend that sync is already
        // setup, to avoid showing about:accounts snippets to browsers
        // that do not support mozUITour signal or have accounts
        // already setup.
        return true;
    }

    function updateFxAccountStatus() {
        var callback = function(result) {
            gSnippetsMap.set('fxaccount', result.setup);
        }
        var event = new CustomEvent(
            'mozUITour', {
                bubbles: true,
                detail: {
                    action:'getConfiguration',
                    data: {
                        configuration: 'sync',
                        callbackID: _waitForCallback(callback)
                    }
                }
            }
        );
        document.dispatchEvent(event);
    }

    function updateSelectedSearchEngine() {
        var callback = function(result) {
            gSnippetsMap.set('selectedSearchEngine', result.searchEngineIdentifier);
        }
        var event = new CustomEvent(
            'mozUITour', {
                bubbles: true,
                detail: {
                    action:'getConfiguration',
                    data: {
                        configuration: 'selectedSearchEngine',
                        callbackID: _waitForCallback(callback)
                    }
                }
            }
        );
        document.dispatchEvent(event);
    }

    // Check whether we have the user's country stored and if it is still valid.
    function haveUserCountry() {
        // Check if there's an existing country code to use.
        if (gSnippetsMap.get('geoCountry')) {
            // Make sure we have a valid lastUpdated date.
            var lastUpdated = Date.parse(gSnippetsMap.get('geoLastUpdated'));
            if (lastUpdated) {
                // Make sure that it is past the lastUpdated date.
                var now = new Date();
                if (now < lastUpdated + GEO_CACHE_DURATION) {
                    return true;
                }
            }
        }

        return false;
    }

    function getUserCountry() {
        if (haveUserCountry()) {
            return gSnippetsMap.get('geoCountry').toLowerCase();
        } else {
            return null;
        }
    }

    // Download the user's country using the geolocation service.
    function downloadUserCountry() {
        $script(GEO_URL, 'geo');
        $script.ready('geo', function() {
            try {
                gSnippetsMap.set('geoCountry', geoip_country_code());
                gSnippetsMap.set('geoLastUpdated', new Date());
            } catch (e) {
                // Most likely failed to load JS file. Continue on without us,
                // we'll try again next time.
            }
        });
    }

    // Notifies stats server that the given snippet ID
    // was shown. No personally-identifiable information
    // is sent.
    function sendImpression() {
        sendMetric('impression');
    }

    // Modifies the given links to include the specified GET parameters.
    function modifyLinks(links, parameters) {
        for (var k = 0, len = links.length; k < len; k++) {
            var link = links[k];
            var delimeter = (link.href.indexOf('?') !== -1 ? '&' : '?');

            // Pull the fragment off of the link
            var fragment_position = link.href.indexOf('#');
            if (fragment_position === -1) {
                fragment_position = link.href.length;
            }

            var href = link.href.substring(0, fragment_position);
            var fragment = link.href.substring(fragment_position);

            link.href = href + delimeter + parameters + fragment;
        }
    }

    // Add links to buttons that block snippets.
    function addSnippetBlockLinks(elements) {
        var snippet_id = document.getElementById('snippet_set').getAttribute('data-snippet-id');
        var blockSnippet = function (event) {
            event.preventDefault();
            addToBlockList(snippet_id);
            sendMetric('snippet-blocked', function() { window.location.reload(); })
        };

        for (var k = 0; k < elements.length; k++) {
            var button = elements[k];
            button.addEventListener('click', blockSnippet);
        }
    }

    // Check for localStorage support. Copied from Modernizr.
    function supportsLocalStorage() {
        var s = 'snippets-test';
        try {
            localStorage.setItem(s, s);
            localStorage.removeItem(s);
            return true;
        } catch(e) {
            return false;
        }
    }

    // Listen for clicks on links that point to 'about:accounts' and
    // convert them showFirefoxAccounts Events.
    document.addEventListener('click', function(event) {
        var target = event.target;
        while (target && target.tagName && target.tagName.toLowerCase() !== 'a') {
            target = target.parentNode;
        }
        if (target && target.href && target.href.indexOf('about:accounts') === 0) {
            var snippet_id = document.getElementById('snippet_set').getAttribute('data-snippet-id');
            var metric = snippet_id + '-about-accounts-click';
            var fire_event = function() {
                var event = new CustomEvent(
                    'mozUITour',
                    { bubbles: true, detail: { action:'showFirefoxAccounts', data: {}}}
                );
                document.dispatchEvent(event);
            };
            sendMetric(metric, fire_event);
        }
    }, false);

    // UITour Helper. Exact copy from
    // https://raw.githubusercontent.com/Unfocused/mozilla-uitour/master/src/mozilla-uitour.js
    function _generateCallbackID() {
        return Math.random().toString(36).replace(/[^a-z]+/g, '');
    }

    // UITour Helper. Exact copy from
    // https://raw.githubusercontent.com/Unfocused/mozilla-uitour/master/src/mozilla-uitour.js
    function _waitForCallback(callback) {
        var id = _generateCallbackID();

        function listener(event) {
            if (typeof event.detail != "object")
                return;
            if (event.detail.callbackID != id)
                return;

            document.removeEventListener("mozUITourResponse", listener);
            callback(event.detail.data);
        }
        document.addEventListener("mozUITourResponse", listener);

        return id;
    }

})(window.showDefaultSnippets);

// Send impressions and other interactions to the service
// If no parameter is entered, quit function
function sendMetric(metric, callback) {
        
    if ((Math.random() > SNIPPET_METRICS_SAMPLE_RATE) || (!metric)) {
        if (callback) {
            callback();
        }
        return;
    }

    var snippet_set = document.getElementById('snippet_set');
    var locale = snippet_set.getAttribute('data-locale');
    var userCountry = snippet_set.getAttribute('data-user-country') || '';
    var campaign = snippet_set.getAttribute('data-campaign') || '';
    var snippet_id = snippet_set.getAttribute('data-snippet-id');
    var url = (SNIPPET_METRICS_URL + '?snippet_name=' + snippet_id +
               '&locale=' + locale + '&country=' + userCountry + '&metric=' + metric + '&campaign=' + campaign);
    var r = new XMLHttpRequest();
    r.open('GET', url);
    if (callback) {
        r.addEventListener('loadend', callback, false);
    }
    r.send();
    return r;
}

function popFromBlockList(snippetID) {
    var blockList = getBlockList();
    var item = blockList.pop(snippetID);
    gSnippetsMap.set('blockList', blockList);
    return item;
}

function addToBlockList(snippetID) {
    var blockList = getBlockList();
    snippetID = parseInt(snippetID, 10);
    if (blockList.indexOf(snippetID) === -1) {
        blockList.unshift(snippetID);
        gSnippetsMap.set('blockList', blockList);
    }
}

function getBlockList() {
    if (gSnippetsMap.get('blockList') === undefined) {
        gSnippetsMap.set('blockList', []);
    }
    return gSnippetsMap.get('blockList');
}

//]]>
</script></div>